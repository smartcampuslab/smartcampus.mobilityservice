#include ("imports.vm")
#macro(null $check)
#if(!$check)null#else${check}#end
#end
#foreach($pe in $pees)
// condition evaluate ${foreach.count}
boolean evaluate_e${foreach.count}(ttype, rtype, from, to, promoted, iteration, wheelchair, resultNumber) {
#if ($pe.getCondition().getFormula())
	println "$pe.getCondition().getFormula()" + "->" + ($pe.getCondition().getFormula()); 
	return $pe.getCondition().getFormula();
#else
	return false;
#end
};
#end

##List evaluatePlanResults(planRequests) {
	def ok = [];
	def unrecoverable = []
	def matched = false;
	planRequests.each ( {	
#foreach($pe in $pees)
		matched = false;
#if ($pe.enabled)
		def pv = new PlanningVariables(it);
		matched = false;
		
		if (evaluate_e${foreach.count}(pv.ttype, pv.rtype, pv.from, pv.to, pv.promoted, pv.iteration, pv.wheelchair, pv.resultNumber)) {
			def spp = it.getSmartplannerParameters();
#if ($pe.getAction().getMaxTotalWalkDistance())
			spp.put(SmartplannerParameter.maxTotalWalkDistance, $pe.getAction().getMaxTotalWalkDistance());
#end
#if ($pe.getAction().getMaxWalkDistance())
			spp.put(SmartplannerParameter.maxWalkDistance, $pe.getAction().getMaxWalkDistance());
#end
#if ($pe.getAction().getExtraTransport())
			spp.put(SmartplannerParameter.extraTransport, $helper.toString($pe.getAction().getExtraTransport()));
#end
#if ($pe.getAction().getMaxChanges())
			spp.put(SmartplannerParameter.maxChanges, $pe.getAction().getMaxChanges());
#end
#if ($pe.getAction().getNewTType())
			it.setType($helper.toString($pe.getAction().getNewTType()));
#end
#if ($pe.getAction().getNewRType())
			it.setRouteType($helper.toString($pe.getAction().getNewRType()));
#end	
#if ($pe.getAction().getNewItineraryNumber())
			it.setItineraryNumber($pe.getAction().getNewItineraryNumber());
#end
#if ($pe.getAction().getWheelchair())
			it.setWheelChair($pe.getAction().getWheelchair());
#end
			matched = true;
		}
#end
		

#end
		if (!matched) {
			ok.add(it);
		}
	});
	
	planRequests.removeAll(ok);
	planRequests.removeAll(unrecoverable);
	
	planRequests.each ( {
		it.itinerary = []; 
		PlanningPolicyHelper.buildSmartplannerRequest(it);
	});
	
	return ok;
##}
	